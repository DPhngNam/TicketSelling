version: '3.8' 

services:

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.11-management-alpine # Use a specific version
    hostname: rabbitmq # Consistent hostname
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/ # Persist data
    environment:
      # Use secrets for production credentials
      RABBITMQ_DEFAULT_USER_FILE: /run/secrets/rabbitmq_user
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq_password
    secrets:
      - rabbitmq_user
      - rabbitmq_password
    networks:
      - backend-net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager] # place on manager node
      restart_policy:
        condition: on-failure

  # Logging - Elasticsearch (Data Store)
  elasticsearch:
    image: elasticsearch:7.17.10 # Match ELK stack versions
    environment:
      - discovery.type=single-node # Simple setup for one node
      - bootstrap.memory_lock=true # Recommended for performance
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # Adjust heap size as needed
    ulimits: # Required by Elasticsearch
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data:/usr/share/elasticsearch/data # Persist data
    networks:
      - backend-net
    ports:
      - "9200:9200" # API port
    # Healthcheck helps ensure ES is ready before dependent services fully start actions
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: 1
      # placement: # Add constraints if needed (e.g., nodes with high I/O or memory)
      #   constraints: [node.labels.storage == ssd]
      restart_policy:
        condition: on-failure
      resources: 
        limits:
          memory: 1G 
        reservations:
          memory: 512M 

  # Logging - Logstash (Processor)
  logstash:
    image: logstash:7.17.10 # Match ELK stack versions
    # Add user: root if Logstash needs to bind to privileged ports (<1024)
    # user: root
    ports:
      # Example: Port for Beats input (if used)
      # - "5044:5044"
      # Example: Port for TCP/UDP input (configure in logstash.conf)
      - "5000:5000/tcp"
      - "5000:5000/udp"
    environment:
      LS_JAVA_OPTS: "-Xms256m -Xmx256m" # Adjust heap size
      # Add other necessary environment variables
    volumes:
      # Mount the pipeline configuration
      - logstash_pipeline:/usr/share/logstash/pipeline/
    configs:
      # Source points to the Docker config name, target is where it appears in container
      - source: logstash_config
        target: /usr/share/logstash/pipeline/logstash.conf
    networks:
      - backend-net
    # depends_on is informational in Swarm; Logstash needs retry logic if ES isn't up
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Logging - Kibana (UI)
  kibana:
    image: kibana:7.17.10 # Match ELK stack versions
    ports:
      - "5601:5601" # Kibana UI port
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200 # Points to the ES service name
    networks:
      - backend-net
    # depends_on is informational in Swarm
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  # Monitoring - Prometheus (Data Store & Scraper)
  prometheus:
    image: prom/prometheus:v2.45.0 # Use a specific version
    ports:
      - "9090:9090" # Prometheus UI/API port
    volumes:
      - prometheus_data:/prometheus # Persist data
      # Mount the configuration file
      - /path/on/host/prometheus.yml:/etc/prometheus/prometheus.yml # Option 1: Bind mount config
    # Option 2: Use Docker Configs (Recommended for Swarm)
    # configs:
    #   - source: prometheus_config
    #     target: /etc/prometheus/prometheus.yml
    # command: # Command needed when using Docker Configs
    #   - '--config.file=/etc/prometheus/prometheus.yml'
    #   - '--storage.tsdb.path=/prometheus'
    #   - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    #   - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - backend-net
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager] # Often good to run on a manager
      restart_policy:
        condition: on-failure

  # Monitoring - Grafana (UI)
  grafana:
    image: grafana/grafana:9.5.3 # Use a specific version
    ports:
      - "3000:3000" # Grafana UI port
    volumes:
      - grafana_data:/var/lib/grafana